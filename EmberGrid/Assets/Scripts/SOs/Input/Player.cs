//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/SOs/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""BasicActions"",
            ""id"": ""ea44aace-e530-465b-95c9-bf5b84c3c844"",
            ""actions"": [
                {
                    ""name"": ""RotRight"",
                    ""type"": ""Button"",
                    ""id"": ""d7162fe6-c710-4425-b988-b826154c45d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotLeft"",
                    ""type"": ""Button"",
                    ""id"": ""96b9e6d9-5323-4ee8-9ee9-dcdde3c75484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamUp"",
                    ""type"": ""Button"",
                    ""id"": ""b8520e41-9d83-4296-b427-3bbe4e5c2907"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamDown"",
                    ""type"": ""Button"",
                    ""id"": ""499b5e13-3d14-44e3-9b25-20582bd59233"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRight"",
                    ""type"": ""Button"",
                    ""id"": ""ff3e932b-df8d-49f1-bb45-2a741655b603"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2b0acae3-88bb-45fe-a34a-985013c6b4e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd7e9442-7cd0-49aa-a2fc-e17b53b9650a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""499fa2d5-c23a-4186-b390-2a06216f74ce"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83ea3de8-afd7-456a-88e1-747458936e3f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0624c562-9640-4244-bce9-09722ac49243"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""268c0f98-11f6-4ad9-ba84-1528cb336fc7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e761d139-f38b-47f2-9080-ca6fefdcf884"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicActions
        m_BasicActions = asset.FindActionMap("BasicActions", throwIfNotFound: true);
        m_BasicActions_RotRight = m_BasicActions.FindAction("RotRight", throwIfNotFound: true);
        m_BasicActions_RotLeft = m_BasicActions.FindAction("RotLeft", throwIfNotFound: true);
        m_BasicActions_CamUp = m_BasicActions.FindAction("CamUp", throwIfNotFound: true);
        m_BasicActions_CamDown = m_BasicActions.FindAction("CamDown", throwIfNotFound: true);
        m_BasicActions_CamRight = m_BasicActions.FindAction("CamRight", throwIfNotFound: true);
        m_BasicActions_CamLeft = m_BasicActions.FindAction("CamLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicActions
    private readonly InputActionMap m_BasicActions;
    private List<IBasicActionsActions> m_BasicActionsActionsCallbackInterfaces = new List<IBasicActionsActions>();
    private readonly InputAction m_BasicActions_RotRight;
    private readonly InputAction m_BasicActions_RotLeft;
    private readonly InputAction m_BasicActions_CamUp;
    private readonly InputAction m_BasicActions_CamDown;
    private readonly InputAction m_BasicActions_CamRight;
    private readonly InputAction m_BasicActions_CamLeft;
    public struct BasicActionsActions
    {
        private @Player m_Wrapper;
        public BasicActionsActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotRight => m_Wrapper.m_BasicActions_RotRight;
        public InputAction @RotLeft => m_Wrapper.m_BasicActions_RotLeft;
        public InputAction @CamUp => m_Wrapper.m_BasicActions_CamUp;
        public InputAction @CamDown => m_Wrapper.m_BasicActions_CamDown;
        public InputAction @CamRight => m_Wrapper.m_BasicActions_CamRight;
        public InputAction @CamLeft => m_Wrapper.m_BasicActions_CamLeft;
        public InputActionMap Get() { return m_Wrapper.m_BasicActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActionsActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Add(instance);
            @RotRight.started += instance.OnRotRight;
            @RotRight.performed += instance.OnRotRight;
            @RotRight.canceled += instance.OnRotRight;
            @RotLeft.started += instance.OnRotLeft;
            @RotLeft.performed += instance.OnRotLeft;
            @RotLeft.canceled += instance.OnRotLeft;
            @CamUp.started += instance.OnCamUp;
            @CamUp.performed += instance.OnCamUp;
            @CamUp.canceled += instance.OnCamUp;
            @CamDown.started += instance.OnCamDown;
            @CamDown.performed += instance.OnCamDown;
            @CamDown.canceled += instance.OnCamDown;
            @CamRight.started += instance.OnCamRight;
            @CamRight.performed += instance.OnCamRight;
            @CamRight.canceled += instance.OnCamRight;
            @CamLeft.started += instance.OnCamLeft;
            @CamLeft.performed += instance.OnCamLeft;
            @CamLeft.canceled += instance.OnCamLeft;
        }

        private void UnregisterCallbacks(IBasicActionsActions instance)
        {
            @RotRight.started -= instance.OnRotRight;
            @RotRight.performed -= instance.OnRotRight;
            @RotRight.canceled -= instance.OnRotRight;
            @RotLeft.started -= instance.OnRotLeft;
            @RotLeft.performed -= instance.OnRotLeft;
            @RotLeft.canceled -= instance.OnRotLeft;
            @CamUp.started -= instance.OnCamUp;
            @CamUp.performed -= instance.OnCamUp;
            @CamUp.canceled -= instance.OnCamUp;
            @CamDown.started -= instance.OnCamDown;
            @CamDown.performed -= instance.OnCamDown;
            @CamDown.canceled -= instance.OnCamDown;
            @CamRight.started -= instance.OnCamRight;
            @CamRight.performed -= instance.OnCamRight;
            @CamRight.canceled -= instance.OnCamRight;
            @CamLeft.started -= instance.OnCamLeft;
            @CamLeft.performed -= instance.OnCamLeft;
            @CamLeft.canceled -= instance.OnCamLeft;
        }

        public void RemoveCallbacks(IBasicActionsActions instance)
        {
            if (m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActionsActions @BasicActions => new BasicActionsActions(this);
    public interface IBasicActionsActions
    {
        void OnRotRight(InputAction.CallbackContext context);
        void OnRotLeft(InputAction.CallbackContext context);
        void OnCamUp(InputAction.CallbackContext context);
        void OnCamDown(InputAction.CallbackContext context);
        void OnCamRight(InputAction.CallbackContext context);
        void OnCamLeft(InputAction.CallbackContext context);
    }
}
